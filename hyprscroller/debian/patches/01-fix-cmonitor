Index: source/src/scroller.cpp
===================================================================
--- source.orig/src/scroller.cpp
+++ source/src/scroller.cpp
@@ -145,7 +145,7 @@ public:
     ScrollerSizes() {}
     ~ScrollerSizes() { reset(); }
 
-    Mode get_mode(CMonitor *monitor) {
+    Mode get_mode(PHLMONITOR monitor) {
         update_sizes(monitor);
         const auto monitor_data = monitors.find(monitor->szName);
         if (monitor_data != monitors.end()) {
@@ -157,7 +157,7 @@ public:
     }
 
     ConfigurationSize get_window_default_height(PHLWINDOW window) {
-        const auto monitor = g_pCompositor->getMonitorFromID(window->m_iMonitorID);
+        const auto monitor = window->m_pMonitor.lock();
         update_sizes(monitor);
         const auto monitor_data = monitors.find(monitor->szName);
         if (monitor_data != monitors.end()) {
@@ -169,7 +169,7 @@ public:
     }
 
     ConfigurationSize get_column_default_width(PHLWINDOW window) {
-        const auto monitor = g_pCompositor->getMonitorFromID(window->m_iMonitorID);
+        const auto monitor = window->m_pMonitor.lock();
         update_sizes(monitor);
         const auto monitor_data = monitors.find(monitor->szName);
         if (monitor_data != monitors.end()) {
@@ -181,7 +181,7 @@ public:
     }
 
 private:
-    void update_sizes(CMonitor *monitor) {
+    void update_sizes(PHLMONITOR monitor) {
         MonitorData monitor_data;
         monitor_data.mode = Mode::Row;
         monitor_data.window_default_height = updatate_window_default_height();
@@ -786,7 +786,7 @@ public:
     }
     bool move_focus_up(bool focus_wrap) {
         if (active == windows.first()) {
-            CMonitor *monitor = g_pCompositor->getMonitorInDirection('u');
+            PHLMONITOR monitor = g_pCompositor->getMonitorInDirection('u');
             if (monitor == nullptr) {
                 if (focus_wrap)
                     active = windows.last();
@@ -802,7 +802,7 @@ public:
     }
     bool move_focus_down(bool focus_wrap) {
         if (active == windows.last()) {
-            CMonitor *monitor = g_pCompositor->getMonitorInDirection('d');
+            PHLMONITOR monitor = g_pCompositor->getMonitorInDirection('d');
             if (monitor == nullptr) {
                 if (focus_wrap)
                     active = windows.first();
@@ -1111,7 +1111,7 @@ public:
         : workspace(window->workspaceID()), reorder(Reorder::Auto),
         overview(false), active(nullptr), pinned(nullptr) {
         post_event("overview");
-        const auto PMONITOR = g_pCompositor->getMonitorFromID(window->m_iMonitorID);
+        const auto PMONITOR = window->m_pMonitor.lock();
         set_mode(scroller_sizes.get_mode(PMONITOR));
         update_sizes(PMONITOR);
     }
@@ -1227,7 +1227,7 @@ public:
 private:
     bool move_focus_left(bool focus_wrap) {
         if (active == columns.first()) {
-            CMonitor *monitor = g_pCompositor->getMonitorInDirection('l');
+            PHLMONITOR monitor = g_pCompositor->getMonitorInDirection('l');
             if (monitor == nullptr) {
                 if (focus_wrap)
                     active = columns.last();
@@ -1242,7 +1242,7 @@ private:
     }
     bool move_focus_right(bool focus_wrap) {
         if (active == columns.last()) {
-            CMonitor *monitor = g_pCompositor->getMonitorInDirection('r');
+            PHLMONITOR monitor = g_pCompositor->getMonitorInDirection('r');
             if (monitor == nullptr) {
                 if (focus_wrap)
                     active = columns.first();
@@ -1508,7 +1508,7 @@ public:
         }
     }
     // Returns the old viewport
-    Box update_sizes(CMonitor *monitor) {
+    Box update_sizes(PHLMONITOR monitor) {
         // for gaps outer
         static auto PGAPSINDATA = CConfigValue<Hyprlang::CUSTOMTYPE>("general:gaps_in");
         static auto PGAPSOUTDATA = CConfigValue<Hyprlang::CUSTOMTYPE>("general:gaps_out");
@@ -2040,7 +2040,7 @@ bool ScrollerLayout::isWindowTiled(PHLWI
 */
 void ScrollerLayout::recalculateMonitor(const MONITORID &monitor_id)
 {
-    auto PMONITOR = g_pCompositor->getMonitorFromID(monitor_id);
+    const auto PMONITOR = g_pCompositor->getMonitorFromID(monitor_id);
     if (!PMONITOR)
         return;
 
@@ -2134,7 +2134,7 @@ void ScrollerLayout::fullscreenRequestFo
             }
         } else {
             // apply new pos and size being monitors' box
-            const auto PMONITOR   = g_pCompositor->getMonitorFromID(window->m_iMonitorID);
+            const auto PMONITOR   = window->m_pMonitor.lock();
             if (EFFECTIVE_MODE == FSMODE_FULLSCREEN) {
                 window->m_vRealPosition = PMONITOR->vecPosition;
                 window->m_vRealSize     = PMONITOR->vecSize;
@@ -2281,7 +2281,7 @@ void ScrollerLayout::onEnable() {
             continue;
 
         onWindowCreatedTiling(window);
-        recalculateMonitor(window->m_iMonitorID);
+        recalculateMonitor(window->monitorID());
     }
 }
 
Index: source/src/main.cpp
===================================================================
--- source.orig/src/main.cpp
+++ source/src/main.cpp
@@ -41,7 +41,7 @@ APICALL EXPORT PLUGIN_DESCRIPTION_INFO P
     static auto P2 = HyprlandAPI::registerCallbackDynamic(PHANDLE, "focusedMon", [](void* self, SCallbackInfo& info, std::any param) {
         if (!g_ScrollerLayout || !g_ScrollerLayout->is_enabled())
             return;
-        auto monitor = std::any_cast<CMonitor *>(param);
+        auto monitor = std::any_cast<PHLMONITOR>(param);
         g_ScrollerLayout->post_event(monitor->activeWorkspaceID(), "mode");
         g_ScrollerLayout->post_event(monitor->activeWorkspaceID(), "overview");
     });
